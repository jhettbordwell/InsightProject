# Tracing everything by following this website:
# https://www.freecodecamp.org/news/how-to-build-a-web-application-using-flask-and-deploy-it-to-the-cloud-3551c985e492/

from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, SelectField, BooleanField, SubmitField
from wtforms.validators import DataRequired
import glob

class conditionData:
    import pandas as pd
    
    def __init__(self, metadata_file='Medications_SideEffects_brandAndlinks.csv'):
        self.medsDF = pd.read_csv(metadata_file, index_col=0)

    def clean_medications(self):
        # Finding all duplicate medications and ensuring there aren't duplicates
        popem = []   # Tracking rows that are technically duplicates
        keepers = {} # Finding lists of all the matched medication names
        for ind, med in zip(self.medications.index, self.medications):
            # Removing medication from a dataframe and finding relevant alternate names
            testDF = self.medications.drop(index=ind)
            altnames = self.altnames.loc[ind].split(', ')

            # Comparing against every other medication and finding matched cases
            for ind2, med2 in zip(testDF.index, testDF):

                # If there is a match, create a set with all the unique alternate names and save it
                if med2 in altnames:
                    allAltnames = list(set([med] + self.altnames.loc[ind2].split(', '))|set(altnames))
                    # Handling case where more than one row fits those criteria
                    if med in keepers:
                        keepers[med] = list(set(allAltnames)|set(keepers[med]))
                    else:
                        keepers[med] =  allAltnames

        # Creating a dataframe with all that information so I can drop duplicate rows
        organized = [{'Medication': key, 'All names': keepers[key]} for key in keepers]
        organizedDF = pd.DataFrame(organized)

        # Dropping rows that have same lists of alternate names (would be nice to do this by brandname...but not right now)
        organizedDF = organizedDF.drop_duplicates(subset=['All names'])
        organizedDF.to_csv('Medications_unique_{:s}.csv'.format(self.condition), delimiter='$')


    def pull_condition(self, condition):
        # Pulling condition
        self.condition = condition
        self.medications = self.medsDF[self.medsDF['Condition'].eq(condition)]['Medication']
        self.altnames = self.medsDF[self.medsDF['Condition'].eq(condition)]['Alternate names']
        if not glob.glob('Medications_unique_{:s}.csv'.format(self.condition)):
            self.clean_medications()
        self.unique_meds = pd.read_csv('Medications_unique_{:s}.csv'.format(self.condition), sep='$')

    def pull_SideEffects(self, medication):
        sideEffects = []
        for key in ['Most common', 'Less common', 'Incidence not known']:
            sideEffects += self.medsDF[self.medsDF['Medication'].eq(medication)][key].split('; ')
        return sideEffects

    def pull_allSideEffects(self):
        # Make a list of every side effect for every med for a given condition
        self.listOfSEs = []
        for ind, med in zip(self.unique_meds.index, self.unique_meds['Medication']):
            self.listOfSEs.append(self.pull_SideEffects(med))

        # Find all the unique side effects (Probably will have to curate)
        self.listOfSEs = list(set(self.listOfSEs)).sort() # Make this intelligble for human beings

        # Make this parseable for flask forms
        self.SEresponseList = []
        for i,SE in enumerate(self.listOfSEs):
            self.SEresponseList.append((i,SE))
        
            
class PsychedUpForm(FlaskForm):
    # Creating a class instance to read the metadata file for all the reviews
    medicationInfo = conditionData()
    
    # Defining question and choices (to match metadata file) by hand
    diagnosis_question = u"What is your (or your patient's) preliminary diagnosis?"
    diagnosis_choices = [('Bipolar-Disorder', 'Bipolar Disorder (type I or II)'),
                         ('Depression', 'Depression'),
                         ('Anxiety', 'Anxiety'),
                         ('ADHD','ADHD'),
                         ('Schizophrenia','Schizophrenia')]
    diagnosis = SelectField(diagnosis_question, choices=diagnosis_choices,
                            validators=[DataRequired()])

    # Working with that diagnosis information
    medicationInfo.pull_condition(diagnosis)
    
    # Side effects questions
    medicationInfo.pull_allSideEffects()  # Grabbing a list of every side effect for relevant meds

    concerns = {}
    concerns_ratings = {}
    for concernNum in ['first','second','third']:
        concern_question = u"What is the {:s} side effect concern you have about your medication?".format(concernNum)
        concern = SelectField(concern_question, choices=medicationInfo.SEresponseList)
        concerns[concernNum] = concern
        
        concern_rating_question = u"How much of a concern is this for you on a scale of 1 to 10?"
        concern_rating = SelectField(concern_rating_question,
                                     choices=[(0.1*(i-1),i) for i in range(1,11)])
        concerns_ratings[concernNum] = concern_rating
        
    # Lifestyle concerns
    lifestyle_question = u"(STRETCH GOAL) I am worried about interactions with: "
    lifestyle_choices = [(1, 'Alcohol'), (2, 'Marijuana'), (3, 'Both')]
    lifestyle = SelectField(lifestyle_question, lifestyle_choices)

    # Addiction concerns
    addiction_question = u"(STRETCH GOAL) Are you worried about addiction to your medication? "
    addiction_choices = [(1, 'Yes'), (2, 'No')]
    addiction = SelectField(addiction_question, addiction_choices)

    # Comparison of side effects to effectiveness
    eff_question = u"On a scale of 1 to 10, how tolerable would these side effects be if the medication were effective at treating your condition?"
    eff_rating = SelectField(eff_question,
                             choices=[(0.1*(i-1),i) for i in range(1,11)],
                             validators=[DataRequired()])

class LetsGo(FlaskForm):
    submit = SubmitField("Let's get started!")



